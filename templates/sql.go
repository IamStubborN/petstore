package templates

import (
	"os"
	"strconv"
	"text/template"
	"time"

	"github.com/IamStubborN/petstore/db/models"
	"github.com/Pallinder/go-randomdata"
)

var sql = `-- Generated by tmpl/sql.go. DO NOT EDIT.
-- +migrate Up
-- +migrate StatementBegin
insert into "user"(id, user_name, first_name, last_name, email, password, phone, user_status_id) 
VALUES {{range $i, $u := .Users}}{{if $i}},{{end}}
({{$u.ID}},'{{$u.Username}}','{{$u.FirstName}}','{{$u.LastName}}','{{$u.Email}}','{{$u.Password}}','{{$u.Phone}}','{{$u.UserStatus}}'){{end}} on conflict do nothing;

insert into pet (id, category_id, "name", photo_urls, pet_status_id) 
VALUES {{range $i, $p := .Pets}}{{if $i}},{{end}}
({{$p.ID}},{{$p.Category.ID}},'{{$p.Name}}',{{range $u := $p.PhotoURLs}}'{{$u}}{{end}}','{{$p.Status}}'){{end}} on conflict do nothing;

insert into pet_tag(pet_id, tag_id) 
VALUES {{range $i, $p := .Pets}}{{if $i}},{{end}}
{{range $j, $t := .Tags}}{{if $j}},{{end}}({{$p.ID}}, {{$t.ID}}){{end}}{{end}} on conflict do nothing;

insert into "order"(pet_id, user_id, quantity, ship_date, order_status_id)
VALUES {{range $i, $o := .Orders}}{{if $i}},{{end}}
({{$o.PetID}},{{$o.UserID}},{{$o.Quantity}},'{{$o.ShipDate}}',{{$o.Status}}){{end}} on conflict do nothing;

SELECT setval('user_id_seq', (SELECT MAX(id) FROM "user"));
SELECT setval('order_id_seq', (SELECT MAX(id) FROM "order"));
SELECT setval('pet_id_seq', (SELECT MAX(id) FROM "pet"));

-- +migrate StatementEnd
`

func GenerateRandomSQLData(count int) error {
	var data = struct {
		Users  []models.User
		Pets   []models.Pet
		Orders []models.Order
	}{
		generateRandomUsers(count),
		generateRandomPets(count),
		generateRandomOrders(count),
	}
	file, err := os.Create("db/migrations/003-random-data.sql")
	if err != nil {
		return err
	}

	t, err := template.New("sql").Parse(sql)
	if err != nil {
		return err
	}

	if err = t.Execute(file, data); err != nil {
		return err
	}

	return nil
}

func generateRandomUsers(count int) (users []models.User) {
	for i := 1; i <= count; i++ {
		users = append(users, models.User{
			ID:         int64(i),
			Username:   randomdata.SillyName() + randomdata.Digits(2),
			Email:      randomdata.Email(),
			Password:   randomdata.RandStringRunes(8),
			FirstName:  randomdata.FirstName(randomdata.RandomGender),
			LastName:   randomdata.LastName(),
			Phone:      "+38096" + randomdata.Digits(7),
			UserStatus: int64(randomdata.Number(1, 5)),
		})
	}
	return
}

func generateRandomPets(count int) (pets []models.Pet) {
	for i := 1; i <= count; i++ {
		pets = append(pets, models.Pet{
			ID: int64(i),
			Category: models.Category{
				ID: int64(randomdata.Number(1, 6)),
			},
			Name: randomdata.SillyName(),
			PhotoURLs: []string{
				`{http://` + randomdata.SillyName() + `.com,http://` + randomdata.SillyName() + `.com,http://` + randomdata.SillyName() + `.com}`},
			Tags: []models.Tag{{
				ID: int64(randomdata.Number(1, 6)),
			}, {
				ID: int64(randomdata.Number(1, 6)),
			}, {
				ID: int64(randomdata.Number(1, 6)),
			},
			},
			Status: randomdata.StringSample("1", "2", "3"),
		})
	}
	return
}

func generateRandomOrders(count int) (orders []models.Order) {
	to := time.Now().Add(24 * time.Hour).UTC()
	from := time.Now().Add(-24 * time.Hour).UTC()

	toFormatted := to.Format("2006-01-02")
	fromFormatted := from.Format("2006-01-02")

	for i := 1; i <= count; i++ {
		orders = append(orders, models.Order{
			PetID:    int64(i),
			UserID:   int64(i),
			Quantity: int32(randomdata.Number(1, 20)),
			ShipDate: randomdata.FullDateInRange(fromFormatted, toFormatted) + " " +
				strconv.Itoa(randomdata.Number(0, 24)) + ":" +
				strconv.Itoa(randomdata.Number(0, 60)) + ":" +
				strconv.Itoa(randomdata.Number(0, 60)),
			Status:   randomdata.StringSample("1", "2", "3"),
			Complete: false,
		})
	}
	return
}
